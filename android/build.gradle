import java.nio.file.Paths
buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:2.3.3'
  }
}

apply plugin: 'com.android.library'

def getExtOrDefault(name, defaultValue) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def safeExtGet(prop, fallback) {
  rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}


def found = false
def basePath = projectDir.toPath().normalize()

// Find node_modules inside the example project
def nodeModulesDir = Paths.get(basePath.getParent().toString(), "example/node_modules")
def reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
  found = true
}

if(!found){
  // Node's module resolution algorithm searches up to the root directory,
  // after which the base path will be null
  while (basePath) {
    nodeModulesDir = Paths.get(basePath.toString(), "node_modules")
    reactNativeDir = Paths.get(nodeModulesDir.toString(), "react-native/android")
    if (nodeModulesDir.toFile().exists() && reactNativeDir.toFile().exists()) {
      found = true
      break;
    }
    basePath = basePath.getParent()
  }
}

if(!found) {
  throw new GradleException(
    "${project.name}: unable to locate React Native android sources. " +
      "Ensure you have you installed React Native as a dependency in your project and try again.")
}

def nodeModulesPath = nodeModulesDir.toString().replace("\\", "/")
def reactNativePath = reactNativeDir.toString().replace("\\", "/")

android {
  compileSdkVersion safeExtGet('compileSdkVersion', 31)
  buildToolsVersion "30.0.3"

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', 21)
    targetSdkVersion safeExtGet('targetSdkVersion', 31)
    versionCode 1
    versionName "1.0"

    externalNativeBuild {
      cmake {
        cppFlags "-fexceptions", "-frtti", "-std=c++1y", "-DONANDROID"
        abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        arguments '-DANDROID_STL=c++_shared', "-DNODE_MODULES_DIR=${nodeModulesPath}"
      }
    }
  }
  lintOptions {
    abortOnError false
  }
  sourceSets {
    main {
      jniLibs.srcDirs = ['libs']
    }
  }

  externalNativeBuild {
    cmake {
      path "./CMakeLists.txt"
    }
  }

  packagingOptions {
    excludes = ["**/libc++_shared.so","**/libjsi.so","**/libreactnativejni.so","META-INF/MANIFEST.MF"]
  }

  configurations {
    extractJNI
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'com.facebook.react:react-native:+'
  implementation files('libs/GizWifiSDK.jar')
  implementation files('libs/Lark7618SDK_noudp1606031910_0101.jar')
  implementation files('libs/easylink2.0.jar')
  implementation files('libs/easylinkv3-0.2.6.jar')
  implementation files('libs/libForEElink.jar')
  implementation files('libs/ltlink2.jar')
  implementation files('libs/OneShotConfig.jar')

  def rnAAR = fileTree(reactNativePath).matching({ it.include "**/**/*.aar" }).singleFile
  extractJNI(files(rnAAR))
}



def extracted = false;
task extractJNIFiles {
  if (extracted) return
  doLast {
    configurations.extractJNI.files.each {
      def file = it.absoluteFile

      copy {
        from zipTree(file)
        into "$buildDir/$file.name"
        include "jni/**/*"
      }
      extracted = true;
    }
  }
}

// Extract JNI files as soon as first task is added
tasks.whenTaskAdded { task ->
  task.dependsOn(extractJNIFiles);
}
